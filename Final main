import numpy as np
import cv2
import os
import sys
import time
import RPi.GPIO as GPIO
import threading

import subprocess



#Initialize scores to 0
finalB = 0
finalR = 0

reset_flag = False

roundB = [0,0,0,0]
roundR = [0,0,0,0]

GPIO.cleanup()

GPIO.setmode(GPIO.BCM)

EndRound_PIN = 10
Reset_PIN = 9

##BUNAG STUPID CODE START
#Setup for Segments A-G as digital output
A_PIN = 2
B_PIN = 3
C_PIN = 4
D_PIN = 17
E_PIN = 27
F_PIN = 22
G_PIN = 5
segment_pins = {
	'A': A_PIN,
	'B': B_PIN,
	'C': C_PIN,
	'D': D_PIN,
	'E': E_PIN,
	'F': F_PIN,
	'G': G_PIN
	}

#setup segment pins	
segments = {}
for seg, pin in segment_pins.items():
    GPIO.setup(pin, GPIO.OUT)
    segments[seg] = pin
    
#Digit Mapping for Seven-Segment Displays
digit_to_segments = {
	0: [1,1,1,1,1,1,0],
	1: [0,1,1,0,0,0,0],
	2: [1,1,0,1,1,0,1],
	3: [1,1,1,1,0,0,1],
	4: [0,1,1,0,0,1,1],
	5: [1,0,1,1,0,1,1],
	6: [1,0,1,1,1,1,1],
	7: [1,1,1,0,0,0,0],
	8: [1,1,1,1,1,1,1],
	9: [1,1,1,1,0,1,1],
	'b': [0,0,1,1,1,1,1],
	'L': [0,0,0,1,1,1,0],
	'u': [0,0,1,1,1,0,0],
	'E': [1,0,0,1,1,1,1],
	'r': [0,0,0,0,1,0,1],
	'd': [0,1,1,1,1,0,1],
	'J': [0,0,0,0,0,0,0]
	}

segments_order = ['A','B','C','D','E','F','G']

def display_digit(digit):
    pattern = digit_to_segments[digit]
    for seg, bit in zip(segments_order, pattern):
        GPIO.output(segments[seg], bit)

# Display Enable Pins for all 8 displays
enable_pin_numbers = [18, 23, 24, 25, 8, 7, 1, 16]
for pin in enable_pin_numbers:
	GPIO.setup(pin,GPIO.OUT)
display_enable_pins = enable_pin_numbers

def reset_handler(channel):
	global reset_flag
	reset_flag = True

digit_delay = 0.0003

def multiplex_display(index, digit):
    # Turn off all displays
    for pin in display_enable_pins:
        GPIO.output(pin,0)
    # Set segments
    display_digit(digit)
    # Enable one digit
    GPIO.output(display_enable_pins[index],1)
    time.sleep(digit_delay)
    GPIO.output(display_enable_pins[index],0)
    

def multiplex_displays():
    for _ in range(20):  # Run through several cycles per display update
        for i in range(len(display_enable_pins)):
            if reset_flag:
                return
            multiplex_display(i, display_digits[i])


def display_all_zeros():
    global reset_flag
    while reset_flag:
        for i in range(len(display_enable_pins)):
            multiplex_display(i, 0)
            reset_flag = False



GPIO.setup(Reset_PIN, GPIO.IN, pull_up_down=GPIO.PUD_UP)
GPIO.setup(EndRound_PIN, GPIO.IN, pull_up_down=GPIO.PUD_UP)


os.environ["QT_QPA_PLATFORM"] = "offscreen"

#####GEOGHEGAN CODE START
cams = [0, 1, 2]
current_cam = 0



def init_camera(cam_index):
   """Initialize and return a camera object."""
   print(f"Initializing Camera {cam_index}...")
   cam = cv2.VideoCapture(cam_index)
   if not cam.isOpened():
       print(f"Error: Could not open camera {cam_index}")
       return None
   cam.set(3, 640)
   cam.set(4, 480)
   return cam


# Initialize first camera
webcam = init_camera(cams[current_cam])

if webcam is None:
   exit("Exiting: No camera detected.")

def roundLoop():
	
	while True:
		
		ret, imageFrame = webcam.read()
		if not ret:
			print(f"Warning: Camera {cams[current_cam]} failed to capture a frame.")
			continue


		# Convert to HSV color space
		hsvFrame = cv2.cvtColor(imageFrame, cv2.COLOR_BGR2HSV)


		# Define color ranges
		red_lower1, red_upper1 = np.array([0, 160, 120], np.uint8), np.array([8, 255, 255], np.uint8)
		red_lower2, red_upper2 = np.array([160, 105, 90], np.uint8), np.array([180, 255, 255], np.uint8)
		blue_lower, blue_upper = np.array([100, 120, 70], np.uint8), np.array([140, 255, 255], np.uint8)
		red_mask1, red_mask2 = cv2.inRange(hsvFrame, red_lower1, red_upper1), cv2.inRange(hsvFrame, red_lower2, red_upper2)
		red_mask = cv2.bitwise_or(red_mask1, red_mask2)
		blue_mask = cv2.inRange(hsvFrame, blue_lower, blue_upper)


		kernel = np.ones((4, 4), "uint8")
		red_mask, blue_mask = cv2.dilate(red_mask, kernel), cv2.dilate(blue_mask, kernel)


		# Find and draw red contours
		contours, _ = cv2.findContours(red_mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
		for contour in contours:
			area = cv2.contourArea(contour)
			if 1500 < area < 8000:
				x, y, w, h = cv2.boundingRect(contour)
				cv2.rectangle(imageFrame, (x, y), (x + w, y + h), (0, 0, 255), 2)
				if x<=150:
					y=0
				if x>=450:
					y=0
				if 88 <= y <= 214:

					global r1
					r1 = r1+1
				elif 215 <= y <= 336:

					global r2
					r2 = r2+1
				elif 337 <= y <= 401:

					global r3
					r3 = r3+1
				elif 402 <= y <= 426:

					global r4
					r4 = r4+1
            
		# Find and draw blue contours
		contours, _ = cv2.findContours(blue_mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
		for contour in contours:
			area = cv2.contourArea(contour)
			if 1500 < area < 8000:
				x, y, w, h = cv2.boundingRect(contour)
				cv2.rectangle(imageFrame, (x, y), (x + w, y + h), (255, 0, 0), 2)
				if x<=150:
					y=0
				if x>=450:
					y=0
				if 88<=y<=214:

					global b1
					b1 = b1+1
				elif 215<=y<=336:

					global b2
					b2 = b2+1
				elif 337<y<=401:

					global b3
					b3 = b3+1
				elif 402<=y<=426:

					global b4
					b4 = b4+1

		cv2.imshow("Color Detection", imageFrame)
		

   
		break
#########END OF GEOGHEGAN CODE
GPIO.add_event_detect(Reset_PIN, GPIO.FALLING, callback=reset_handler, bouncetime = 200)

display_digits = "00000000"  # Default to all zeros

display_running = True  # Flag to control the loop

def display_loop():
    while display_running:
        multiplex_displays()
global side        
side = 13        
GPIO.setup(13,GPIO.OUT)
GPIO.setup(6,GPIO.OUT)

def activeLight(active_pin):
    if active_pin == 13:
        GPIO.output(13, GPIO.HIGH)  # Turn ON Red side LED
        GPIO.output(6, GPIO.LOW)   # Turn OFF Blue side LED
    elif active_pin == 6:
        GPIO.output(6, GPIO.HIGH)  # Turn ON Blue side LED
        GPIO.output(13, GPIO.LOW)   # Turn OFF Red side LED
	
	

display_thread = threading.Thread(target=display_loop)
display_thread.start()

z1R = "0"
z1B = "0"
k = 0
z2R = 0
z2B = 0
scoreRstr = "00"
scoreBstr = "00"
scoreR = 0
scoreB = 0
finalRsub = 0
finalBsub = 0
z2Ra = 0
z2Ba = 0
scoreBa = 0
scoreRa = 0
cha = "JJJJJJJJ"

activeLight(13)
##Main loop 
while True:
	
	b1 = 0
	b2 = 0
	b3 = 0
	b4 = 0
	r1 = 0
	r2 = 0
	r3 = 0
	r4 = 0 

	roundLoop()

	
	finalR = r1*1+r2*2+r3*3+r4*4
	finalB = b1*1+b2*2+b3*3+b4*4
	
	if finalR > 9:
		finalRsub = finalR - 10
		z1R = "1"
	elif finalR < 10:
		z1R = "0"
		finalRsub = finalR
	if finalB > 9:
		finalBsub = finalB - 10
		z1B = "1"
	elif finalB < 10:
		finalBsub = finalB
		z1B = "0"
	
	
	
	
	if scoreR > 9:
		z2Ra = z2R+1
		scoreRa = scoreR - 10
	if scoreB > 9:
		z2Ba = z2B+1
		scoreBa = scoreB - 10
		
		
		
	finalRstr = str(finalRsub)
	finalBstr = str(finalBsub)
	rF = str(z2Ra) + str(scoreRa)
	bF = str(z2Ba) + str(scoreBa)
	rR = str(z1R) + finalRstr
	bR = str(z1B) + finalBstr
	score_str = rF+bF+rR+bR
	

	display_digits = [int(x) for x in score_str]
	multiplex_displays()

	
	if GPIO.input(EndRound_PIN) == GPIO.LOW:
		if finalR > finalB:
			scoreR = scoreR + (finalR-finalB)
			scoreB = scoreB
			#WIN CONDITION RED
			if scoreR > 14:
				if scoreR > 19:
					scoreRa = scoreR-20
					
					finalRstr = str(finalRsub)
					finalBstr = str(finalBsub)
					rF = "2" + str(scoreRa)
					bF = str(z2Ba) + str(scoreB)
					score_str = rF+bF+"rEdJ"
					while not reset_flag:
						display_digits = []
						for ch in score_str:
							if ch.isdigit():
								display_digits.append(int(ch))
							elif ch in digit_to_segments:
								display_digits.append(ch)

							else:
								display_digits.append(0)
								
						while k < 4:
							multiplex_displays()
							k=k+1
							
						k = 0
						time.sleep(0.5)
				elif scoreR < 19:	
					z2Ra = 1
					scoreRa = scoreR-10
					finalRstr = str(finalRsub)
					finalBstr = str(finalBsub)
					rF = "1" + str(scoreRa)
					bF = str(z2Ba) + str(scoreB)
					score_str = rF+bF+"rEdJ"
					while not reset_flag:
						display_digits = []
						for ch in score_str:
							if ch.isdigit():
								display_digits.append(int(ch))
							elif ch in digit_to_segments:
								display_digits.append(ch)

							else:
								display_digits.append(0)
								
						while k < 4:
							multiplex_displays()
							k=k+1
							
						k = 0
						time.sleep(0.5)
						

					

				scoreR = 0
				scoreB = 0
				z2R = 0
				z2B = 0
				z1R = "0"
				z1B = "0"
		elif finalB > finalR:
			scoreB = scoreB + (finalB-finalR)
			scoreR = scoreR
			#WIN CONDITION BLUE
			if scoreB > 14:
				if scoreB > 19:

					scoreBa = scoreB-20
					finalRstr = str(finalRsub)
					finalBstr = str(finalBsub)
					rF = str(z2Ra) + str(scoreR)
					bF = "2" + str(scoreBa)

					score_str = rF+bF+"bLuE"
					while not reset_flag:
						display_digits = []
						for ch in score_str:
							if ch.isdigit():
								display_digits.append(int(ch))
							elif ch in digit_to_segments:
								display_digits.append(ch)

							else:
								display_digits.append(0)
								
						while k < 4:
							multiplex_displays()
							k=k+1
							
						k = 0
						time.sleep(0.5)
				elif scoreB < 19:	
					z2Ba = 1
					scoreBa = scoreB-10
					finalRstr = str(finalRsub)
					finalBstr = str(finalBsub)
					rF = str(z2Ra) + str(scoreR)
					bF = "1" + str(scoreBa)

					score_str = rF+bF+"bLuE"
					while not reset_flag:
						display_digits = []
						for ch in score_str:
							if ch.isdigit():
								display_digits.append(int(ch))
							elif ch in digit_to_segments:
								display_digits.append(ch)

							else:
								display_digits.append(0)
								
						while k < 4:
							multiplex_displays()
							k=k+1
							
						k = 0
						time.sleep(0.5)
					


				scoreR = 0
				scoreB = 0
				z2R = 0
				z2B = 0
				z1R = "0"
				z1B = "0"
				
		elif finalR == finalB:
			scoreR = scoreR
			scoreB = scoreB
		scoreRstr = str(scoreR)
		scoreBstr = str(scoreB)
		if side == 6:
			side = 13
			activeLight(side)
		elif side == 13:
			side = 6
			activeLight(side)
		

			
		
		
		
		webcam.release()

		current_cam = (current_cam + 1) % len(cams)
		print(f"Switching to Camera {cams[current_cam]}")
		webcam = init_camera(cams[current_cam])
		if webcam is None:
			current_cam = (current_cam + 1) % len(cams)
			print(f"Switching to Camera {cams[current_cam]}")
			webcam = init_camera(cams[current_cam])
			if webcam is None:
				current_cam = (current_cam + 1) % len(cams)
				print(f"Switching to Camera {cams[current_cam]}")
				webcam = init_camera(cams[current_cam])
				continue
			
		
	elif reset_flag:
		finalB = 0
		finalR = 0
		roundB = 0
		roundR = 0
		scoreR = 0
		scoreB = 0
		z2R = 0
		z2B = 0
		z2Ra = 0
		z2Ba = 0
		finalRsub = 0
		finalBsub = 0
		scoreBa = 0
		scoreRa = 0
		display_all_zeros()
		time.sleep(2)
		
		continue
display_running = False
display_thread.join()
GPIO.cleanup()
